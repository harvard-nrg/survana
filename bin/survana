#!/usr/bin/env node

var program = require('commander'),
    mkdirp = require('mkdirp'),
    pkg = require('../package.json'),
    os = require('os'),
    async = require('async'),
    ursa = require('ursa'),
    fs = require('fs'),
    request = require('request'),
    crypto = require('crypto'),
    mailer = require('nodemailer');

var modules = [
    "survana-study",
    "survana-admin",
    "survana-store"
];

// end-of-line code
var eol = ('win32' == os.platform()) ? '\r\n' : '\n'

//Templates
var app_js = [
    "var survana=require('survana');",
    "var config=require('./config');",
    "",
    "survana.run(config);"
].join(eol);

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 * @param {Number} mode
 */
function mkdir(path, fn, mode) {
  if (mode === undefined) {
    mode = 0755;
  }

  mkdirp(path, mode, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

function shouldInstallModule(name,callback)
{
    program.confirm('install '+name+'?',function(ok){
        if (ok)
            callback(null,name);
    });


}

function createKey(key) {
    var result = "",
        wrap = key.match(/-----[A-Za-z0-9 ]+-----/g),
        data = key.replace(/-----[A-Za-z0-9 ]+-----/g, ""),
        result = wrap[0],
        piece;

    do {
        piece = data.slice(0,64);
        data = data.substr(64,data.length);
        result += "\n" + piece;
    } while (piece && piece.length);

    return result + wrap[1];
}

function install()
{
    console.log('installing',modules);
}

function readSecretKeys(keyfile) {
    var secretKeys,
        keyIndex,
        key;

    if (!fs.existsSync(keyfile)) {
        console.error('Error: file not found:', keyfile);
        process.exit(1);
    }

    try {
        secretKeys = JSON.parse(fs.readFileSync(keyfile));
    } catch (err) {
        console.error('Invalid key: ' + keyfile);
        process.exit(1);
    }

    secretKeys.byID = {};

    console.log('Reading secret key for study ' + secretKeys.study + ' downloaded from ' + secretKeys.serverURL);

    for (keyIndex in secretKeys.keys) {
        if (secretKeys.keys.hasOwnProperty(keyIndex)) {
            key = secretKeys.keys[keyIndex];
            secretKeys.keys[keyIndex].privateKey = ursa.coercePrivateKey(createKey(key.privateKey));
            secretKeys.keys[keyIndex].publicKey = ursa.coercePublicKey(createKey(key.publicKey));
            secretKeys.byID[key.keyID] = secretKeys.keys[keyIndex];

        }
    }

    return secretKeys;
}

function createSignature(secretKeys) {
    var keyIndex,
        key,
        payload = {};


    //build a payload: sign each keyID with the privateKey (to prove that we hold the private key)
    for (keyIndex in secretKeys.keys) {
        if (secretKeys.keys.hasOwnProperty(keyIndex)) {
            key = secretKeys.keys[keyIndex];
            payload[key.keyID] = key.privateKey.hashAndSign('sha256', key.keyID, 'utf8', 'hex')
        }
    }

    return payload;
}

function loadSignature(file) {
    var responses;

    if (!fs.existsSync(file)) {
        console.error('Signature file does not exist: ', file);
        process.exit(1);
    }

    try {
        signature = JSON.parse(fs.readFileSync(file));
    } catch (parse_error) {
        console.error('Error: Invalid signature file format: ' + file);
        process.exit(1);
    }

    return signature;
}

function saveSignature(file, signature) {
    if (fs.existsSync(file)) {
        console.error("WARNING: Signature file already exists: ", file,". New signature will not be saved.");
        return;
    }
    
    fs.writeFileSync(file, JSON.stringify(signature), 'utf8');
    console.log("Saved key signature to ", file);
}

function sendNotificationEmail(address, host, file, callback) {
    var smtpTransport = mailer.createTransport('smtp', {
        name: "survana.org",
        host: host
    });

    smtpTransport.sendMail({
        from: "Survana <no-reply@survana.org>",
        to: address,
        subject: "New responses are available!",
        text:"Hello, we've just stored new responses into " + file + ". You might want to decrypt that file with the secret key.",
    }, callback);
}

function AESCBCDecrypt(encrypted_data, password) {
    var data = new Buffer(encrypted_data, "base64"),
        salt = data.toString("binary", 8, 16),
        ct = data.toString("binary", 16),
        rounds = 3,
        data00 = password + salt,
        md5_hash = new Array(),
        result,
        key,
        iv,
        decipher,
        content,
        i;

    md5_hash[0] = crypto.createHash("md5").update(data00).digest("binary");

    result = md5_hash[0];

    for (i = 1; i < rounds; i++) {
        md5_hash[i] = crypto.createHash("md5").update(md5_hash[i - 1] + data00).digest("binary");
        result += md5_hash[i];
    }

    key = result.substring(0, 32);

    iv  = result.substring(32, (32 + 16));

    decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
    content = decipher.update(ct, "binary", "utf8");
    content += decipher.final("utf8");

    return content;
}

// -- MAIN --

program
    .version(pkg.version)
    .option('-a, --all',        'Install all Survana modules')
    .option('-A, --admin',      'Install the Admin module')
    .option('-S, --study',      'Install the Study module')
    .option('-T, --store',      'Install the Store module')
    .option('-n, --notify <email>', 'Send e-mail to this address when new responses are downloaded (see --download).')
    .option('-d, --download <url>',   'Import data from a Survana store URL')
    .option('-k, --key <path>', 'Study private key')
    .option('-s, --signature <path>', 'Signature of the private key')
    .option('-e, --encrypted <path>', 'Path to encrypted responses')
    .option('-o, --output <path>', 'Save result to file')
    .option('-f, --force',      'Overwrite existing files')
    .option('--smtp <host>',    'Address of the SMTP mail server')
    .parse(process.argv);

// Path
var path = program.args.shift() || '.',
    privateKey,
    secretKeys,
    payload;

if (program.all) {
    program.admin=program.study=program.store=true;
}

if (program.download) {

    if (program.output && fs.existsSync(program.output)) {
        if (!program.force && !program.notify) {
            console.error('Error: File ' + program.output + ' already exists. Use --force to overwrite.');
            process.exit(1);
        }
    } else if (!program.output) {
        console.error('No output file specified. Please use --output to give a path to a file where responses should' +
                      ' be stored.');
        process.exit(1);
    }

    if (program.key) {
        secretKeys = readSecretKeys(program.key);
        payload = {
            key: {
                    server: secretKeys.server,
                    serverURL: secretKeys.serverURL,
                    study: secretKeys.study
                 },
            signature: createSignature(secretKeys)
        };
        if (program.signature) {
            saveSignature(program.signature, payload);
        }
    } else if (program.signature) {
        payload = loadSignature(program.signature);
    }

    //construct the request option object
    requestOpt = {
        uri: program.download,
        method: 'POST',
        json: payload,
        encoding: 'utf8'
    };

    console.log('Contacting Survana Store at ' + program.download);

    //request data
    request(requestOpt, function (err, response, body) {
        if (err) {
            console.error(err);
            process.exit(1);
        }

        if (typeof body !== 'object') {
            console.error('Error: Invalid response received from server: ' + body);
            process.exit(1);
        }

        if (!body.success) {
            console.error('Error retrieving data: ' + message.message);
            process.exit(1);
        }

        if (!body.data.length) {
            console.log('No responses were found.');
            process.exit(0);
        }

        console.log('Saving ' + body.data.length + ' responses to ' + program.output);

        var data = JSON.stringify(body.data, null, 2),
            original_data,
            should_notify = true;

        if (fs.existsSync(program.output)) {
            original_data = fs.readFileSync(program.output, 'utf8');
        }

        //save responses to file
        fs.writeFileSync(program.output, data, 'utf8')

        if (program.notify) {
            //Load original data
            var should_notify = true;

            if (original_data && original_data === data) {
                should_notify = false;
            }

            if (should_notify) {
                console.log('Sending e-mail');
                sendNotificationEmail(program.notify, program.smtp, program.output, function (err, result) {
                    if (err) {
                        console.error('Failed to send notification e-mail to ',program.notify,': ',err.message);
                        process.exit(1);
                    } else {
                        console.log('E-mail sent successfully.');
                        process.exit(0);
                    }
                });
            } else {
                console.log('Not sending notification e-mail.');
            }
        }
    });
}

if (program.encrypted) {

    var responses,
        i;

    if (!fs.existsSync(program.encrypted)) {
        console.error('Error: file ' + program.encrypted + ' does not exist.');
        process.exit(1);
    }

    if (program.output && fs.existsSync(program.output)) {
        if (!program.force) {
            console.error('Error: File ' + program.output + ' already exists. Use --force to overwrite.');
            process.exit(1);
        }
    } else if (!program.output) {
        console.error('No output file specified. Please use --output to give a path to a file where responses should' +
            ' be stored.');
        process.exit(1);
    }

    if (!program.key) {
        console.error("You must specify the path to your secret key file in order to decrypt responses. A signature file will not suffice either.");
        process.exit(1);
    }

    secretKeys = readSecretKeys(program.key);

    console.log('Reading encrypted responses from ' + program.encrypted);

    try {
        responses = JSON.parse(fs.readFileSync(program.encrypted));
    } catch (parse_error) {
        console.error('Error: Invalid response file format: ' + program.encrypted);
        process.exit(1);
    }

    console.log('Decrypting ' + responses.length + ' responses');

    var response,
        password,
        keyID,
        key,
        decoded,
        decrypted_responses = [];

    for (var i = 0; i < responses.length; i++) {
        try {
            response = responses[i];

            keyID = response.key.id;

            key = secretKeys.byID[keyID].privateKey;
            password = key.decrypt(response.payload.password, 'base64', 'utf8', ursa.RSA_PKCS1_PADDING);

            decoded = AESCBCDecrypt(response.payload.data, password);

            decrypted_responses.push(JSON.parse(decoded));

            console.log(i + '. ' + keyID);

        } catch (err) {
            console.error('Error: Failed to decrypt response: ' + err);
        }
    }

    console.log('Saving ' + decrypted_responses.length + ' decrypted responses to ' + program.output);
    fs.writeFileSync(program.output, JSON.stringify(decrypted_responses,null,2));
    console.log('Done.');
}

if (!program.download && !program.encrypted && program.key && program.signature) {
    var secretKeys,
        sig;

    secretKeys = readSecretKeys(program.key);
    sig = createSignature(secretKeys);
    saveSignature(program.signature, sig);
}
